# -*- coding: utf-8 -*-# make diff #   git config --global core.autocrlf false#   git diff --binary --ignore-space-at-eol >> d:\Development\NextGIS\installer\diff.patch# import os, sys, subprocess, stringimport argparseimport ConfigParser as configparserimport codecsimport shutilfrom PyQt4 import QtGuifrom PyQt4 import QtCorefrom copy import copyfrom numpy.oldnumeric.fix_default_axis import copyfileini_file = os.path.join( os.path.splitext(os.path.abspath(__file__))[0]+".ini")config = configparser.ConfigParser()config.readfp(open(ini_file))def checkEnvironment():  print "check Environment"  result = True    def checkTool(call_args):    check = ""    try:      check = "Check %s ..."%call_args[0]      result = subprocess.Popen(call_args, stdout = subprocess.PIPE)      out, err = result.communicate()      print check + " FOUND"    except OSError as e:      print check + " NOT FOUND"      result = False        checkTool(["cmake", "--help"])  checkTool(["git", "help"])  checkTool(["msbuild", "/help"])    return result  def gitClone(url, dest):  cmd = "git clone %(repo)s %(dir)s" % {"repo": url, "dir": dest}  print cmd  subprocess.call(cmd, stdout=sys.stdout)def cmakeConfiguration(commandFile):  passdef check_QGIS_src(config):  qgis_src_dir = os.path.normpath( config.get("QGIS", "src_dir") )    if not os.path.exists(qgis_src_dir):    print "Not found folder ", qgis_src_dir    sys.exit()    os.chdir(qgis_src_dir)    """      Check qgis src  """  print "Check qgis src ..."  print "\nQGIS path: ", qgis_src_dir    p = subprocess.Popen("git status --porcelain ", stdout = subprocess.PIPE)  result = p.communicate()  if result[0] != "":    print "QGIS workcopy status: "    for position in result[0].split("\n"): print "\t\t", position    command = raw_input("reset?: [Y/n]")    if command == "Y" or command == "y":      p = subprocess.Popen("git reset --hard ", stdout = subprocess.PIPE)      result = p.communicate()      print "git reset: ", result  p = subprocess.Popen("git log -n 1 --pretty=format:\"%ar\" ", stdout = subprocess.PIPE)  result = p.communicate()  print "\nQGIS workcopy last commit ", result[0]  command = raw_input("pull?: [Y/n]")  if command == "Y" or command == "y":    p = subprocess.Popen("git pull ", stdout = sys.stdout, stderr = sys.stderr)    result = p.communicate()    if result[1] != None and result[1] != "":        print "Error: git pull faild"        print result[1]        sys.exit()def patching_QGIS():  check_QGIS_src(config)    qgis_src_dir = os.path.normpath( config.get("QGIS", "src_dir") )  os.chdir(qgis_src_dir)    """      Patching  """  print "Patching ..."  patchFileName = os.path.normpath(config.get("NextGIS QGIS Building", "patch"))  p = subprocess.Popen("git apply " + patchFileName, stdout = subprocess.PIPE, stderr = subprocess.PIPE)  result = p.communicate()  if result[1] != None and result[1] != "":    print "Error: patching faild"    print result[1]    sys.exit()    def build_NextGIS_QGIS(config):  """      Building            using:        [QGIS]          src_dir        [NextGIS QGIS Building]:          build_path          cmake_configuration          install_path          gdal  """  qgis_src_dir = os.path.normpath( config.get("QGIS", "src_dir") )  os.chdir(qgis_src_dir)    print "Building ..."  qgis_build_path = os.path.normpath( config.get("NextGIS QGIS Building", "build_path") )  if not os.path.exists(qgis_build_path):    os.mkdir(qgis_build_path)      os.chdir(qgis_build_path)    print "CMake..."  p = subprocess.Popen([        config.get("NextGIS QGIS Building", "cmake_configuration"),         config.get("NextGIS QGIS Building", "install_path"),        config.get("NextGIS QGIS Building", "gdal"),         qgis_src_dir], stdout = sys.stdout, stderr = sys.stderr)  result = p.communicate()  if result[1] != None and result[1] != "":    print "Error: cmake faild"    print result[1]    sys.exit()    print "Build..."  p = subprocess.Popen([        "msbuild",        "/p:Configuration=Release",        os.path.join(qgis_build_path,"qgis2.4.0.sln")], stdout = sys.stdout, stderr = sys.stderr)  result = p.communicate()  if result[1] != None and result[1] != "":    print "Error: cmake faild"    print result[1]    sys.exit()    print "Install..."  p = subprocess.Popen([        "msbuild",        "/p:Configuration=Release",        os.path.join(qgis_build_path,"INSTALL.vcproj")], stdout = sys.stdout, stderr = sys.stderr)  result = p.communicate()  if result[1] != None and result[1] != "":    print "Error: cmake faild"    print result[1]    sys.exit()    def make_installer(config):  print "**********************   make installer   *********************"    nsis_parameters = {      "PROGRAM_NAME":config.get("Installer","program_name"),      "PROGRAM_VERSION":config.get("Installer","program_version"),      "PROGRAM_INSTALLER_HEADER":config.get("Installer","program_name_for_install_dialog"),      "PROGRAM_INSTALLER_OUTPUT_FILENAME":os.path.join(config.get("Installer","put_here"), config.get("Installer","installer_name")+".exe"),      "PROGRAM_INSTALL_DEFAULT_INSTALL_DIR":os.path.join("c:\\", string.join(config.get("Installer","program_name").split(" "),"_")),      "PROGRAM_RUN_LNK_NAME":config.get("Installer","run_lnk_name"),      "PROGRAM_UNINSTALL_FILE_NAME":"Uninstall " + string.join(config.get("Installer","program_name").split(" "),"_") + "(${PROGRAM_VERSION})",      "PROGRAM_UNINSTALL_LNK_NAME":"Удалить ${PROGRAM_RUN_LNK_NAME} (${PROGRAM_VERSION})",      "OSGEO4W_SRC_DIR":os.path.normpath(config.get("Installer","osgeo4w-env")),      "QGIS_SRC_DIR":os.path.normpath(config.get("Installer","nextgis-qgis")),      "GRASS_SRC_DIR":os.path.normpath(config.get("Installer","grass")),      "SAGA_SRC_DIR":os.path.normpath(config.get("Installer","saga")),      "GDAL_SRC_DIR":os.path.normpath(config.get("Installer","gdal")),      "PROGRAM_RUN_LNK_ICO_PATH":os.path.normpath(config.get("Installer","run_lnk_ico_path")),      "PROGRAM_RUN_LNK_ICO_FILENAME":os.path.basename(os.path.normpath(config.get("Installer","run_lnk_ico_path"))),      "QGIS_RUN_BAT":os.path.normpath(config.get("Installer","run_bat")),      "QGIS_PRE_RUN_BAT":os.path.normpath(config.get("Installer","prerun_bat")),      "REKOD_QGIS_DOCS":os.path.normpath(config.get("Installer","rekod_docs")),      "NEXTGIS_QGIS_CUSTOMIZATION_LIGHT":os.path.normpath(config.get("Installer","customization_light")),      "NEXTGIS_QGIS_CUSTOMIZATION_FULL":os.path.normpath(config.get("Installer","customization_full")),  }    # Add DEFAULT_PROJECT  if config.has_option("Installer","default_project"):      if config.get("Installer","default_project") != "":          nsis_parameters.update( {"DEFAULT_PROJECT":os.path.normpath(config.get("Installer","default_project"))} )  # ---------------------    # Add PLUGGINS  if config.has_option("Installer","pluggins"):      if config.get("Installer","pluggins") != "":          nsis_parameters.update({"PLUGINS":""})                    #qgis_config = configparser.ConfigParser()          #qgis_config.add_section("PythonPlugins")                    plugins_config = configparser.ConfigParser()          plugins_config.read(config.get("Installer", "pluggins"))                    for plugin_name in plugins_config.sections():              nsis_parameters["PLUGINS"] += '\'' + plugins_config.get(plugin_name, 'url') + plugin_name + '\' '              #qgis_config.set("PythonPlugins", plugin_name, True)                  #qgis_custom_light_def = nsis_parameters["NEXTGIS_QGIS_CUSTOMIZATION_LIGHT"]          #shutil.copytree(qgis_custom_light_def, qgis_custom_light_def + ".default")                    #qgis_custom_full_def = nsis_parameters["NEXTGIS_QGIS_CUSTOMIZATION_FULL"]          #shutil.copytree(qgis_custom_full_def, qgis_custom_full_def + ".default")                                        nsis_parameters["PLUGINS"] = '"%s"'%nsis_parameters["PLUGINS"]            # ---------------------    make_installer_command = [os.path.normpath("c:\\Program Files\\NSIS\\Bin\\makensis.exe")]    for k, v in nsis_parameters.items():      #make_installer_command += " /D%s=\"%s\""%(k,v)      v.replace('"','\'')      param = "/D%s=%s"%(k,v)      make_installer_command.append( param.decode("utf8").encode("cp1251") )        #make_installer_command.append("/INPUTCHARSET CP1251")  #make_installer_command.append("/OUTPUTCHARSET CP1251")  make_installer_command.append(os.path.normpath("d:\\Development\\NextGIS\\installer\\NSIS\\nextgis_qgis_for_rekod.nsi"))    print make_installer_command  #print make_installer_command.decode("utf8")  #subprocess.call(make_installer_command.decode("utf8").encode("cp1251"), stdout=sys.stdout)  p = subprocess.Popen(make_installer_command, stdout = sys.stdout, stderr = sys.stdout)    #p = subprocess.Popen(d, stdout = sys.stdout, stderr = sys.stdout)  print p  result = p.communicate()  print result  print result[0]  print result[1]    if result[1] != None and result[1] != "":    print "Error: makensis faild"    print result[1]    sys.exit()  class ConfigItem(object):  def __init__(self, section, parameter):    self._Name = parameter    self._Section = section    @property  def name(self):      """I'm the 'name' configuration item."""      return self._Name    @property  def value(self):      """I'm the 'value' configuration item."""      if config.has_option(self._Section, self._Name):          return config.get(self._Section, self._Name)      else:          return ""  @value.setter  def value(self, value):      config.set(self._Section, self._Name, value)class ConfigItemDirectoryConsol(ConfigItem):  def __init__(self, section, parametern):    ConfigItem.__init__(self, section, parameter)    def chooseDirectory(self):    previousValue = raw_input("Enter %s new value (current: %s): " %(self.name, self.value) )  class ConfigItemDirectoryGUI(QtGui.QWidget, ConfigItem):    def __init__(self, section, parameter):        #super(ConfigItem, self).__init__(n)        QtGui.QWidget.__init__(self)        ConfigItem.__init__(self, section, parameter)                self.horizontalLayout = QtGui.QHBoxLayout(self)                self.label = QtGui.QLabel(self)        self.horizontalLayout.addWidget(self.label)                self.lineEdit = QtGui.QLineEdit(self)        self.horizontalLayout.addWidget(self.lineEdit)                self.pushButton = QtGui.QPushButton(self)        self.pushButton.setText("Browse...")        self.horizontalLayout.addWidget(self.pushButton)                self.label.setText(self.name)        self.lineEdit.setText(self.value)                QtCore.QObject.connect(self.pushButton, QtCore.SIGNAL("clicked()"), self.chooseDirectory )        QtCore.QObject.connect(self.lineEdit, QtCore.SIGNAL("editingFinished()"), self.saveValue )      def chooseDirectory(self):        dirName = QtGui.QFileDialog.getExistingDirectory(self,                                               self.tr("Select directory"),                                               self.lineEdit.text(),                                               QtGui.QFileDialog.ShowDirsOnly                                              )        dirName = unicode(dirName)        if dirName != "":            self.lineEdit.setText(dirName)            self.saveValue()    def saveValue(self):        self.value = str(self.lineEdit.text().toUtf8())class ConfigItemFielGUI(QtGui.QWidget, ConfigItem):    def __init__(self, section, parameter):        QtGui.QWidget.__init__(self)        ConfigItem.__init__(self, section, parameter)                self.horizontalLayout = QtGui.QHBoxLayout(self)                self.label = QtGui.QLabel(self)        self.horizontalLayout.addWidget(self.label)                self.lineEdit = QtGui.QLineEdit(self)        self.horizontalLayout.addWidget(self.lineEdit)                self.pushButton = QtGui.QPushButton(self)        self.pushButton.setText("Browse...")        self.horizontalLayout.addWidget(self.pushButton)                self.label.setText(self.name)        self.lineEdit.setText(self.value)                QtCore.QObject.connect(self.pushButton, QtCore.SIGNAL("clicked()"), self.chooseDirectory )        QtCore.QObject.connect(self.lineEdit, QtCore.SIGNAL("editingFinished()"), self.saveValue )      def chooseDirectory(self):        fileName = QtGui.QFileDialog.getOpenFileName(self,                                               self.tr("Select directory"),                                               self.lineEdit.text()                                              )        print "fileName: ", fileName        fileName = unicode(fileName)        if fileName != "":            self.lineEdit.setText(fileName)            self.saveValue()    def saveValue(self):        self.value = str(self.lineEdit.text().toUtf8())        class ConfigItemStringGUI(QtGui.QWidget, ConfigItem):  def __init__(self, section, parameter):    #super(ConfigItem, self).__init__(n)    QtGui.QWidget.__init__(self)    ConfigItem.__init__(self, section, parameter)        self.horizontalLayout = QtGui.QHBoxLayout(self)        self.label = QtGui.QLabel(self)    self.horizontalLayout.addWidget(self.label)        self.lineEdit = QtGui.QLineEdit(self)    self.horizontalLayout.addWidget(self.lineEdit)        self.label.setText(self.name)    self.lineEdit.setText(self.value.decode("utf-8"))        QtCore.QObject.connect(self.lineEdit, QtCore.SIGNAL("editingFinished()"), self.newValue )    def newValue(self):    self.value = unicode(self.lineEdit.text()).encode("utf-8")  class BuildDialogGUI(QtGui.QDialog):  def __init__(self, configparser):    QtGui.QDialog.__init__(self)    self.setObjectName("BuildDialogGUI")    self.resize(655, 498)        sizePolicy = QtGui.QSizePolicy(QtGui.QSizePolicy.Preferred, QtGui.QSizePolicy.Preferred)    sizePolicy.setHorizontalStretch(10)    sizePolicy.setVerticalStretch(0)    sizePolicy.setHeightForWidth(self.sizePolicy().hasHeightForWidth())        self.setSizePolicy(sizePolicy)        self.verticalLayout = QtGui.QVBoxLayout(self)    self.verticalLayout.setObjectName("verticalLayout")        self.verticalLayout.addWidget(ConfigItemDirectoryGUI("QGIS", "src_dir"))    self.verticalLayout.addWidget(ConfigItemDirectoryGUI("NextGIS QGIS Building", "gdal"))    self.verticalLayout.addWidget(ConfigItemStringGUI("NextGIS QGIS Building", "cmake_configuration"))    self.verticalLayout.addWidget(ConfigItemDirectoryGUI("NextGIS QGIS Building", "build_path"))    self.verticalLayout.addWidget(ConfigItemDirectoryGUI("NextGIS QGIS Building", "install_path"))        self.buttonBox = QtGui.QDialogButtonBox(self)    sizePolicy = QtGui.QSizePolicy(QtGui.QSizePolicy.Preferred, QtGui.QSizePolicy.Fixed)    sizePolicy.setHorizontalStretch(1)    sizePolicy.setVerticalStretch(1)    sizePolicy.setHeightForWidth(self.buttonBox.sizePolicy().hasHeightForWidth())    self.buttonBox.setSizePolicy(sizePolicy)    self.buttonBox.setOrientation(QtCore.Qt.Horizontal)    self.buttonBox.setStandardButtons(QtGui.QDialogButtonBox.Cancel|QtGui.QDialogButtonBox.Ok)    self.buttonBox.setCenterButtons(False)    self.verticalLayout.addWidget(self.buttonBox)    QtCore.QObject.connect(self.buttonBox, QtCore.SIGNAL("accepted()"), self.accept)    QtCore.QObject.connect(self.buttonBox, QtCore.SIGNAL("rejected()"), self.reject)    QtCore.QMetaObject.connectSlotsByName(self)    class MakeInstallerDialogGUI(QtGui.QDialog):  def __init__(self, configparser):    QtGui.QDialog.__init__(self)    self.setObjectName("MakeInstallerDialogGUI")    self.resize(655, 498)        sizePolicy = QtGui.QSizePolicy(QtGui.QSizePolicy.Preferred, QtGui.QSizePolicy.Preferred)    sizePolicy.setHorizontalStretch(10)    sizePolicy.setVerticalStretch(0)    sizePolicy.setHeightForWidth(self.sizePolicy().hasHeightForWidth())        self.setSizePolicy(sizePolicy)        self.verticalLayout = QtGui.QVBoxLayout(self)    self.verticalLayout.setObjectName("verticalLayout")        self.verticalLayout.addWidget(ConfigItemStringGUI("Installer", "program_name"))    self.verticalLayout.addWidget(ConfigItemStringGUI("Installer", "program_version"))    self.verticalLayout.addWidget(ConfigItemStringGUI("Installer", "program_name_for_install_dialog"))    self.verticalLayout.addWidget(ConfigItemStringGUI("Installer", "installer_name"))    self.verticalLayout.addWidget(ConfigItemStringGUI("Installer", "run_lnk_name"))        self.verticalLayout.addWidget(ConfigItemFielGUI("Installer", "default_project"))    self.verticalLayout.addWidget(ConfigItemFielGUI("Installer", "run_lnk_ico_path"))    self.verticalLayout.addWidget(ConfigItemFielGUI("Installer", "run_bat"))    self.verticalLayout.addWidget(ConfigItemFielGUI("Installer", "prerun_bat"))    self.verticalLayout.addWidget(ConfigItemDirectoryGUI("Installer", "rekod_docs"))    self.verticalLayout.addWidget(ConfigItemDirectoryGUI("Installer", "customization_light"))    self.verticalLayout.addWidget(ConfigItemDirectoryGUI("Installer", "customization_full"))        self.verticalLayout.addWidget(ConfigItemFielGUI("Installer", "pluggins"))        self.verticalLayout.addWidget(ConfigItemDirectoryGUI("Installer", "nextgis-qgis"))    self.verticalLayout.addWidget(ConfigItemDirectoryGUI("Installer", "osgeo4w-env"))    self.verticalLayout.addWidget(ConfigItemDirectoryGUI("Installer", "grass"))    self.verticalLayout.addWidget(ConfigItemDirectoryGUI("Installer", "saga"))    self.verticalLayout.addWidget(ConfigItemDirectoryGUI("Installer", "gdal"))        self.verticalLayout.addWidget(ConfigItemDirectoryGUI("Installer", "put_here"))        self.buttonBox = QtGui.QDialogButtonBox(self)    sizePolicy = QtGui.QSizePolicy(QtGui.QSizePolicy.Preferred, QtGui.QSizePolicy.Fixed)    sizePolicy.setHorizontalStretch(1)    sizePolicy.setVerticalStretch(1)    sizePolicy.setHeightForWidth(self.buttonBox.sizePolicy().hasHeightForWidth())    self.buttonBox.setSizePolicy(sizePolicy)    self.buttonBox.setOrientation(QtCore.Qt.Horizontal)    self.buttonBox.setStandardButtons(QtGui.QDialogButtonBox.Cancel|QtGui.QDialogButtonBox.Ok)    self.buttonBox.setCenterButtons(False)    self.verticalLayout.addWidget(self.buttonBox)    QtCore.QObject.connect(self.buttonBox, QtCore.SIGNAL("accepted()"), self.accept)    QtCore.QObject.connect(self.buttonBox, QtCore.SIGNAL("rejected()"), self.reject)    QtCore.QMetaObject.connectSlotsByName(self)    if __name__ == "__main__":    parser = argparse.ArgumentParser(description='Script for build NextGIS QGIS')        parser.add_argument('-v', '--visual_mode', action='store_true',                        dest='visualMode', help='for display GUI')        parser.add_argument('-i', '--make_installer', action='store_true',                        dest='makeInstaller', help='make installer only (without building)')        parser.add_argument('-b', '--build', action='store_true',                         dest='build', help='build only (without make install)')        #parser.add_argument('--config', help='configuration filename')        if len(sys.argv) <= 1:        parser.print_usage()        args = parser.parse_args()            if args.visualMode:        app = QtGui.QApplication(sys.argv)                if args.build:            dialog = BuildDialogGUI(config)            result = dialog.exec_()                        if result == 1: #todo переделать                config.write(open(ini_file,"w"))                    if args.makeInstaller:            dialog = MakeInstallerDialogGUI(config)            result = dialog.exec_()                        if result == 1: #todo переделать                config.write(open(ini_file,"w"))            if args.build:        build_NextGIS_QGIS(config)    if args.makeInstaller:        make_installer(config)